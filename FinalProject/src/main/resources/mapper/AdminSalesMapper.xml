<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.FinalProject.mapper.AdminSalesMapper">

	<select id="getAdminSales" resultType="AdminSalesDto">
	  SELECT admin_sale_id, store_name, TO_CHAR(cre_date, 'YYYY-MM-DD') AS cre_date, TO_CHAR(edit_date, 'YYYY-MM-DD') AS edit_date, sale_name, price, a_code, b_code, auto
	  FROM tb_admin_sale
	  ORDER BY cre_date DESC
	</select>

	<select id="getAdminSalesList" parameterType="map" resultType="AdminSalesDto">
	    SELECT *
	    FROM sales
	    WHERE 1=1
	    <if test="store_name != null and store_name != ''">
	        AND store_name LIKE CONCAT('%', #{store_name}, '%')
	    </if>
	    <if test="b_codes != null and b_codes.size() > 0">
	        AND b_code IN
	        <foreach item="b_code" collection="b_codes" open="(" separator="," close=")">
	            #{b_code}
	        </foreach>
	    </if>
	</select>
	<select id="getCount" parameterType="AdminSalesDto" resultType="int">
		select nvl(max(rownum),0)
		from tb_admin_sale 
		<where>
	    store_name = #{store_name}
	    <if test="b_codes != null and bcodes.size() > 0">
	      AND b_codes IN
	      <foreach item="b_code" collection="b_codes" open="(" separator="," close=")">
	        #{b_codes}
	      </foreach>
	    </if>
	  </where>
	</select>
	<select id="getAdminSaleById" parameterType="int" resultType="SalesDto">
		select * from tb_admin_sale
		where adminsale_id=#{adminsale_id}
	</select>
	<insert id="insertAdminSales" parameterType="SalesDto">
		insert into tb_admin_sale
		(adminsale_id, store_name, cre_date, edit_date, sale_name, price, a_code, b_code, auto)
		values 
		(adminsale_seq.nextval, #{store_name}, sysdate, sysdate, #{sale_name}, #{price}, #{a_code}, #{b_code}, 'NO' )				
	</insert>
	<update id="editAdminSales">
		update tb_admin_sale
		set (store_name=#{store_name}, edit_date=sysdate, sale_name=#{sale_name}, 
		     price=#{price}, a_code=#{a_code}, b_code=#{b_code}, auto='NO')
		where adminsale_id=#{adminsale_id}
	</update>
	<delete id="deleteAdminSales">
		delete from tb_admin_sale
		where adminsale_id=#{adminsale_id}
	</delete>
	<insert id="insertOrderApprovedCost">
		insert into tb_admin_sale
		(adminsale_id, store_name,cre_date,edit_date, sale_name,price, a_code, b_code,auto)
		values 
		(adminsale_seq.nextval,#{store_name}, sysdate, sysdate, #{sale_name}, #{price}, #{a_code}, #{b_code}, 'YES') 
	</insert>
	<select id="getApprovedOrderId" parameterType="String" resultType="int">
	  SELECT order_id
	  FROM tb_order 
	  WHERE status = #{status}
	</select>
	<select id="getOrderDetailByOrderId" resultType="int">
	  SELECT order_detail_id, product_id, quantity, price, quantity*price as calprice
	  FROM tb_order_detail 
	  WHERE order_id = #{order_id}
	</select>
	<select id="getNameByProductId" resultType="string">
	  SELECT product_id, product_name
	  FROM tb_class 
	  WHERE product_id = #{product_id}
	</select>
	<insert id="insertClsIngProfit">
		insert into tb_admin_sale
		(adminsale_id, store_name,cre_date,edit_date, sale_name,price, a_code, b_code,auto)
		values 
		(adminsale_seq.nextval,#{store_name}, sysdate, sysdate, #{sale_name}, #{price}, #{a_code}, #{b_code}, 'YES') 
	</insert>
	<select id="getIngClassId" parameterType="String" resultType="SalesDto">
	  SELECT class_id, price, status 
	  FROM tb_class 
	  WHERE status = #{status}
	</select>
	<select id="getProfitByClassId" resultType="int">
	  SELECT sc.class_id, COUNT(*) as student_count, c.price, COUNT(*)*c.price as profit  
	  FROM tb_student_class sc
	  Inner Join tb_class c on sc.class_id=c.class_id
	  WHERE sc.class_id= #{class_id}
	  group by sc.class_id
	</select>
	<select id="getNameByClassId" resultType="string">
	  SELECT class_name 
	  FROM tb_class 
	  WHERE class_id = #{class_id}
	</select>
	
	<select id="getAdminProfitStatByYear" parameterType="String" resultType="int">
	  SELECT order_id, total_price, status 
	  FROM tb_order 
	  WHERE status = #{status}
	</select>
	
</mapper>